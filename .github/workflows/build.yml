# This workflow will install Deno then run `deno lint` and `deno test`.
# For more information see: https://github.com/denoland/setup-deno
name: Deno

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      DENO_DIR: my_cache_directory

    steps:
      - name: Setup repo
        uses: actions/checkout@v4

      - name: Cache
        uses: actions/cache@v4
        with:
          # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
          path: |
            ${{ env.DENO_DIR }}
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/deno.lock') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/deno.lock') }}-

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Install dependencies
        run: deno install

      # Uncomment this step to verify the use of 'deno fmt' on each commit.
      # - name: Verify formatting
      #   run: deno fmt --check

      # - name: Run linter
      #   run: deno task lint

      # - name: Run tests
      #   run: deno test -A

      - name: Build
        run: deno task build

      - name: Deploy
        run: |
          curl -X POST -d {} "https://webhooks.amplify.ap-southeast-1.amazonaws.com/prod/webhooks?id=$WEBHOOK_ID&token=$TOKEN&operation=startbuild" -H "Content-Type:application/json"
        env:
          BRANCH_NAME: ${{ vars.BRANCH_NAME }}
          AMPLIFY_APP_ID: ${{ vars.AMPLIFY_APP_ID }}
          WEBHOOK_ID: ${{ vars.WEBHOOK_ID }}
          TOKEN: ${{ secrets.TOKEN }}
